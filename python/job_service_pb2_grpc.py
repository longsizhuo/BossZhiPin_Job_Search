# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import job_service_pb2 as job__service__pb2


class JobServiceStub(object):
    """定义服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadResume = channel.unary_unary(
                '/job_service.JobService/UploadResume',
                request_serializer=job__service__pb2.UploadResumeRequest.SerializeToString,
                response_deserializer=job__service__pb2.UploadResumeResponse.FromString,
                )
        self.SetApiKey = channel.unary_unary(
                '/job_service.JobService/SetApiKey',
                request_serializer=job__service__pb2.SetApiKeyRequest.SerializeToString,
                response_deserializer=job__service__pb2.SetApiKeyResponse.FromString,
                )
        self.StartJob = channel.unary_stream(
                '/job_service.JobService/StartJob',
                request_serializer=job__service__pb2.StartJobRequest.SerializeToString,
                response_deserializer=job__service__pb2.JobStatus.FromString,
                )
        self.StopJob = channel.unary_unary(
                '/job_service.JobService/StopJob',
                request_serializer=job__service__pb2.StopJobRequest.SerializeToString,
                response_deserializer=job__service__pb2.StopJobResponse.FromString,
                )


class JobServiceServicer(object):
    """定义服务
    """

    def UploadResume(self, request, context):
        """文件上传
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetApiKey(self, request, context):
        """设置 API key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartJob(self, request, context):
        """开始任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopJob(self, request, context):
        """停止任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadResume': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadResume,
                    request_deserializer=job__service__pb2.UploadResumeRequest.FromString,
                    response_serializer=job__service__pb2.UploadResumeResponse.SerializeToString,
            ),
            'SetApiKey': grpc.unary_unary_rpc_method_handler(
                    servicer.SetApiKey,
                    request_deserializer=job__service__pb2.SetApiKeyRequest.FromString,
                    response_serializer=job__service__pb2.SetApiKeyResponse.SerializeToString,
            ),
            'StartJob': grpc.unary_stream_rpc_method_handler(
                    servicer.StartJob,
                    request_deserializer=job__service__pb2.StartJobRequest.FromString,
                    response_serializer=job__service__pb2.JobStatus.SerializeToString,
            ),
            'StopJob': grpc.unary_unary_rpc_method_handler(
                    servicer.StopJob,
                    request_deserializer=job__service__pb2.StopJobRequest.FromString,
                    response_serializer=job__service__pb2.StopJobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'job_service.JobService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobService(object):
    """定义服务
    """

    @staticmethod
    def UploadResume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/job_service.JobService/UploadResume',
            job__service__pb2.UploadResumeRequest.SerializeToString,
            job__service__pb2.UploadResumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetApiKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/job_service.JobService/SetApiKey',
            job__service__pb2.SetApiKeyRequest.SerializeToString,
            job__service__pb2.SetApiKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/job_service.JobService/StartJob',
            job__service__pb2.StartJobRequest.SerializeToString,
            job__service__pb2.JobStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/job_service.JobService/StopJob',
            job__service__pb2.StopJobRequest.SerializeToString,
            job__service__pb2.StopJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
